package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/rraymondgh/arr-interface/internal/client"
	"github.com/rraymondgh/arr-interface/internal/gql"
	"github.com/rraymondgh/arr-interface/internal/gql/gqlmodel"
	"github.com/rraymondgh/arr-interface/internal/gql/gqlmodel/gen"
	"github.com/rraymondgh/arr-interface/internal/protocol"
)

// Download is the resolver for the download field.
func (r *clientMutationResolver) Download(ctx context.Context, obj *gqlmodel.ClientMutation, infoHashes []protocol.ID, clientID *gen.ClientID) (*string, error) {
	cc, err := client.New(clientID, &r.servarrConfig)
	if err != nil {
		r.log.Warn(err)
		return nil, err
	}

	err = cc.Client.AddInfoHashes(ctx, client.AddInfoHashesRequest{ClientID: clientID.String(), InfoHashes: infoHashes})
	if err != nil {
		r.log.Warn(err)
	}
	return nil, err
}

// Client is the resolver for the client field.
func (r *mutationResolver) Client(ctx context.Context) (gqlmodel.ClientMutation, error) {
	return gqlmodel.ClientMutation{}, nil
}

// ClientMutation returns gql.ClientMutationResolver implementation.
func (r *Resolver) ClientMutation() gql.ClientMutationResolver { return &clientMutationResolver{r} }

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

type clientMutationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
