// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type SystemQuery struct {
	Version  string `json:"version"`
	Download bool   `json:"download"`
}

type ClientID string

const (
	ClientIDServarr      ClientID = "Servarr"
	ClientIDTransmission ClientID = "Transmission"
	ClientIDQBittorrent  ClientID = "QBittorrent"
)

var AllClientID = []ClientID{
	ClientIDServarr,
	ClientIDTransmission,
	ClientIDQBittorrent,
}

func (e ClientID) IsValid() bool {
	switch e {
	case ClientIDServarr, ClientIDTransmission, ClientIDQBittorrent:
		return true
	}
	return false
}

func (e ClientID) String() string {
	return string(e)
}

func (e *ClientID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClientID(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClientID", str)
	}
	return nil
}

func (e ClientID) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
