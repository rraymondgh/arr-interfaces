schema {
  query: Query
  mutation: Mutation
}
scalar Date
scalar DateTime
scalar Hash20
scalar Void
scalar Year
type ClientMutation {
  download(infoHashes: [Hash20!]): Void
}
type Content {
  type: ContentType!
  source: String!
  id: String!
  title: String!
  releaseDate: Date
  releaseYear: Year
  adult: Boolean
  originalLanguage: LanguageInfo
  originalTitle: String
  overview: String
  runtime: Int
  popularity: Float
  voteAverage: Float
  voteCount: Int
  attributes: [ContentAttribute!]!
  collections: [ContentCollection!]!
  metadataSource: MetadataSource!
  externalLinks: [ExternalLink!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type ContentAttribute {
  source: String!
  key: String!
  value: String!
  metadataSource: MetadataSource!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type ContentCollection {
  type: String!
  source: String!
  id: String!
  name: String!
  metadataSource: MetadataSource!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type ContentTypeAgg {
  value: ContentType
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type Episodes {
  label: String!
  seasons: [Season!]!
}
type ExternalLink {
  metadataSource: MetadataSource!
  url: String!
}
type GenreAgg {
  value: String!
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type LanguageAgg {
  value: Language!
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type LanguageInfo {
  id: String!
  name: String!
}
type MetadataSource {
  key: String!
  name: String!
}
type Mutation {
  torrent: TorrentMutation!
  client: ClientMutation!
}
type Query {
  torrent: TorrentQuery!
  torrentContent: TorrentContentQuery!
  torrentContentByID: TorrentContentByID!
  system: SystemQuery!
}
type ReleaseYearAgg {
  value: Year
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type Season {
  season: Int!
  episodes: [Int!]
}
type SuggestedTag {
  name: String!
  count: Int!
}
type SystemQuery {
  version: String!
  download: Boolean!
}
type Torrent {
  infoHash: Hash20!
  name: String!
  size: Int!
  hasFilesInfo: Boolean!
  singleFile: Boolean
  extension: String
  filesStatus: FilesStatus!
  filesCount: Int
  fileType: FileType
  fileTypes: [FileType!]
  files: [TorrentFile!]
  sources: [TorrentSource!]!
  seeders: Int
  leechers: Int
  tagNames: [String!]!
  magnetUri: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type TorrentContent {
  id: ID!
  infoHash: Hash20!
  torrent: Torrent!
  contentType: ContentType
  contentSource: String
  contentId: String
  content: Content
  title: String!
  languages: [LanguageInfo!]
  episodes: Episodes
  videoResolution: VideoResolution
  videoSource: VideoSource
  videoCodec: VideoCodec
  video3d: Video3d
  videoModifier: VideoModifier
  releaseGroup: String
  seeders: Int
  leechers: Int
  publishedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type TorrentContentAggregations {
  contentType: [ContentTypeAgg!]
  torrentSource: [TorrentSourceAgg!]
  torrentTag: [TorrentTagAgg!]
  torrentFileType: [TorrentFileTypeAgg!]
  language: [LanguageAgg!]
  genre: [GenreAgg!]
  releaseYear: [ReleaseYearAgg!]
  videoResolution: [VideoResolutionAgg!]
  videoSource: [VideoSourceAgg!]
}
type TorrentContentByID {
  id(infoHash: Hash20): TorrentContentSearchResult!
}
type TorrentContentQuery {
  search(query: SearchQueryInput, facets: TorrentContentFacetsInput, orderBy: [TorrentContentOrderByInput!]): TorrentContentSearchResult!
}
type TorrentContentSearchResult {
  totalCount: Int!
  totalCountIsEstimate: Boolean!
  "hasNextPage is true if there are more results to fetch"
  hasNextPage: Boolean
  items: [TorrentContent!]!
  aggregations: TorrentContentAggregations!
}
type TorrentFile {
  infoHash: Hash20!
  index: Int!
  path: String!
  extension: String
  fileType: FileType
  size: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type TorrentFileTypeAgg {
  value: FileType!
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type TorrentMutation {
  delete(infoHashes: [Hash20!]!): Void
  putTags(infoHashes: [Hash20!]!, tagNames: [String!]!): Void
  setTags(infoHashes: [Hash20!]!, tagNames: [String!]!): Void
  deleteTags(infoHashes: [Hash20!], tagNames: [String!]): Void
}
type TorrentQuery {
  suggestTags(query: SuggestTagsQueryInput): TorrentSuggestTagsResult!
}
type TorrentSource {
  key: String!
  name: String!
  importId: String
  seeders: Int
  leechers: Int
}
type TorrentSourceAgg {
  value: String!
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type TorrentSuggestTagsResult {
  suggestions: [SuggestedTag!]!
}
type TorrentTagAgg {
  value: String!
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type VideoResolutionAgg {
  value: VideoResolution
  label: String!
  count: Int!
  isEstimate: Boolean!
}
type VideoSourceAgg {
  value: VideoSource
  label: String!
  count: Int!
  isEstimate: Boolean!
}
enum ContentType {
  movie
  tv_show
  music
  ebook
  comic
  audiobook
  game
  software
  xxx
}
enum FacetLogic {
  and
  or
}
enum FileType {
  archive
  audio
  data
  document
  image
  software
  subtitles
  video
}
enum FilesStatus {
  no_info
  single
  multi
  over_threshold
}
enum Language {
  ar
  bs
  bg
  ca
  zh
  cs
  da
  nl
  en
  et
  fi
  fr
  de
  el
  he
  hi
  hr
  hu
  is
  id
  it
  ja
  ko
  lv
  lt
  mk
  ml
  no
  fa
  pl
  pt
  ro
  ru
  sk
  sl
  es
  sr
  sv
  ta
  th
  tr
  uk
  vi
  af
  hy
  az
  eu
  be
  ce
  co
  ka
  ku
  mi
  ms
  mt
  mn
  sa
  sm
  so
  cy
  yi
  zu
}
enum TorrentContentOrderBy {
  Relevance
  PublishedAt
  UpdatedAt
  Size
  Files
  Seeders
  Leechers
  Name
  InfoHash
}
enum Video3d {
  V3D
  V3DSBS
  V3DOU
}
enum VideoCodec {
  H264
  x264
  x265
  XviD
  DivX
  MPEG2
  MPEG4
}
enum VideoModifier {
  REGIONAL
  SCREENER
  RAWHD
  BRDISK
  REMUX
}
enum VideoResolution {
  V360p
  V480p
  V540p
  V576p
  V720p
  V1080p
  V1440p
  V2160p
  V4320p
}
enum VideoSource {
  CAM
  TELESYNC
  TELECINE
  WORKPRINT
  DVD
  TV
  WEBDL
  WEBRip
  BluRay
}
input ContentTypeFacetInput {
  aggregate: Boolean
  filter: [ContentType]
}
input GenreFacetInput {
  aggregate: Boolean
  logic: FacetLogic
  filter: [String!]
}
input LanguageFacetInput {
  aggregate: Boolean
  filter: [Language!]
}
input ReleaseYearFacetInput {
  aggregate: Boolean
  filter: [Year]
}
input SearchQueryInput {
  queryString: String
  limit: Int
  offset: Int
  totalCount: Boolean
  "hasNextPage if true, the search result will include the hasNextPage field, indicating if there are more results to fetch"
  hasNextPage: Boolean
  cached: Boolean
  aggregationBudget: Float
}
input SuggestTagsQueryInput {
  prefix: String
  exclusions: [String!]
}
input TorrentContentFacetsInput {
  contentType: ContentTypeFacetInput
  torrentSource: TorrentSourceFacetInput
  torrentTag: TorrentTagFacetInput
  torrentFileType: TorrentFileTypeFacetInput
  language: LanguageFacetInput
  genre: GenreFacetInput
  releaseYear: ReleaseYearFacetInput
  videoResolution: VideoResolutionFacetInput
  videoSource: VideoSourceFacetInput
}
input TorrentContentOrderByInput {
  field: TorrentContentOrderBy!
  descending: Boolean
}
input TorrentFileTypeFacetInput {
  aggregate: Boolean
  logic: FacetLogic
  filter: [FileType!]
}
input TorrentSourceFacetInput {
  aggregate: Boolean
  logic: FacetLogic
  filter: [String!]
}
input TorrentTagFacetInput {
  aggregate: Boolean
  logic: FacetLogic
  filter: [String!]
}
input VideoResolutionFacetInput {
  aggregate: Boolean
  filter: [VideoResolution]
}
input VideoSourceFacetInput {
  aggregate: Boolean
  filter: [VideoSource]
}
"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer."
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT
"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types."
directive @specifiedBy(url: String!) on SCALAR
